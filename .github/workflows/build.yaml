name: Create and publish a Docker image

on:
  push:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KEYCLOAK_HOST: "traefik"
  KEYCLOAK_REALM: "biletado"
  POSTGRES_ASSETS_USER: "postgres"
  POSTGRES_ASSETS_PASSWORD: "postgres"
  POSTGRES_ASSETS_DBNAME: "assets"
  POSTGRES_ASSETS_HOST: "postgres"
  POSTGRES_ASSETS_PORT: 5432

jobs:
  tests:
    runs-on: ubuntu-latest
    container: node:latest
    # service containers to run with `postgres-job`
    services:
      # label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # service environment variables
        # `POSTGRES_HOST` is `postgres`
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: postgres
          # required
          POSTGRES_PASSWORD: postgres
          # optional (defaults to `5432`)
          #POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          #POSTGRES_USER: postgres
        ports:
          # maps tcp port 5432 on service container to the host
          - ${{ POSTGRES_ASSETS_PORT }}:${{ POSTGRES_ASSETS_PORT }}
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # Checkout the Repo
      - uses: actions/checkout@v2

      # Install Node 16
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16

      # Install dependencies
      - run: npm install
      - run: npm run lint:fix
      # Run tests
      - run: npm run test
      # Docker Hub image that `postgres-job` executes in
      - run: npm start
      # Run postman tests
      - uses: matt-ball/newman-action@master
        with:
          collection: tests/Biletado Docker_Compose_Collection_postman_collection.json
  build-and-push-image:
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
